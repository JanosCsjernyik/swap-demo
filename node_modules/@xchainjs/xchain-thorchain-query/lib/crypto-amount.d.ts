import { Asset, AssetAmount, BaseAmount } from '@xchainjs/xchain-util';
import { BigNumber } from 'bignumber.js';
declare type CryptoNumeric = CryptoAmount | number | BigNumber;
/**
 * Utility Class to combine an amount (asset/base) with the Asset
 *
 */
export declare class CryptoAmount {
    baseAmount: BaseAmount;
    readonly asset: Asset;
    constructor(amount: BaseAmount, asset: Asset);
    plus(v: CryptoAmount): CryptoAmount;
    minus(v: CryptoAmount): CryptoAmount;
    times(v: CryptoNumeric): CryptoAmount;
    div(v: CryptoNumeric): CryptoAmount;
    lt(v: CryptoAmount): boolean;
    lte(v: CryptoAmount): boolean;
    gt(v: CryptoAmount): boolean;
    gte(v: CryptoAmount): boolean;
    eq(v: CryptoAmount): boolean;
    formatedAssetString(): string;
    assetAmountFixedString(): string;
    get assetAmount(): AssetAmount;
    /**
     * This guard protects against trying to perform math with different assets
     *
     * Example.
     * const x = new CryptoAmount(assetAmount(1),AssetBTC)
     * const y = new CryptoAmount(assetAmount(1),AssetETH)
     *
     * x.plus(y) <- will throw error "cannot perform math on 2 diff assets BTC.BTC ETH.ETH
     *
     * @param v - CryptoNumeric
     */
    private check;
}
export {};
