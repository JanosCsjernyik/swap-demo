import { Network } from '@xchainjs/xchain-client';
import { Action, MemberDetails, PoolDetail, PoolStatsDetail } from '@xchainjs/xchain-midgard';
import { CryptoAmount } from '../crypto-amount';
import { MidgardConfig } from '../types';
export declare class Midgard {
    private config;
    readonly network: Network;
    private midgardApis;
    constructor(network?: Network, config?: MidgardConfig);
    getMimirDetails(): Promise<Record<string, number>>;
    /**
     *
     * @returns an array of Pools
     */
    getPools(): Promise<PoolDetail[]>;
    /**
     *
     * @returns - constants
     */
    private getConstantsDetails;
    /**
     *
     * @returns the outbound Tx Value in RUNE (Basemount)
     */
    getScheduledOutboundValue(): Promise<CryptoAmount>;
    /**
     * Function that wraps Mimir and Constants to return the value from a given constant name. Searchs Mimir first.
     *
     * @param networkValueName the network value to be used to search the contsants
     * @returns the mimir or constants value
     */
    getNetworkValues(): Promise<Record<string, number>>;
    /**
     * Gets the latest block using the Health endpoint within Midgard
     *
     * @returns
     */
    getLatestBlockHeight(): Promise<number>;
    /**
     * Gets actions object for any of the parameters
     * @param txHash transaction id
     * @returns Type Action array of objects
     */
    getActions(address?: string, txid?: string, asset?: string, type?: string, affiliate?: string, limit?: number, offset?: number): Promise<Action[]>;
    /**
     * Function to return member details based on valid liquidity position
     * @param address - needed to query for Lp details
     * @returns - object type of Member Detail
     */
    getMember(address: string): Promise<MemberDetails>;
    /**
     * Function to return pool statistics for a particular asset
     * @param asset - asset string to query its pool stats
     * @returns - type object poolstatsDetail
     */
    getPoolStats(asset: string): Promise<PoolStatsDetail>;
}
