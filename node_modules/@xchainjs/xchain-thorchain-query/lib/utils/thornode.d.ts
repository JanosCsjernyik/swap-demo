import { Network } from '@xchainjs/xchain-client';
import { InboundAddress, LastBlock, LiquidityProvider, Pool, TxOutItem, TxResponse } from '@xchainjs/xchain-thornode';
export declare type ThornodeConfig = {
    apiRetries: number;
    thornodeBaseUrls: string[];
};
export declare class Thornode {
    private config;
    private network;
    private transactionsApi;
    private queueApi;
    private networkApi;
    private poolsApi;
    private liquidityProvidersApi;
    constructor(network?: Network, config?: ThornodeConfig);
    /**
     * Returns the oubound transactions held by THORChain due to outbound delay
     * May be empty if there are no transactions
     *
     * @returns {ScheduledQueueItem} Array
     *
     */
    getscheduledQueue(): Promise<TxOutItem[]>;
    /**
     *
     * @param txHash - transaction hash
     * @returns - transaction object
     */
    getTxData(txHash: string): Promise<TxResponse>;
    /**
     *
     * @param height - optional thorchain height only
     * @returns - last block data || or block data pertaining to that height number
     */
    getLastBlock(height?: number): Promise<LastBlock[]>;
    /**
     *
     * @returns - thorchain pool
     */
    getPools(): Promise<Pool[]>;
    /**
     *
     * @param asset - asset string
     * @param address - address
     * @param height - optional block height, defaults to current tip
     * @returns
     */
    getLiquidityProvider(asset: string, address: string, height?: number): Promise<LiquidityProvider | undefined>;
    /**
     *
     * @param asset - asset string
     * @param address - address
     * @param height - optional block height, defaults to current tip
     * @returns
     */
    getInboundAddresses(): Promise<InboundAddress[]>;
}
