import { BigNumber } from 'bignumber.js';
import { LiquidityPool } from '../liquidity-pool';
import { Block, ILProtectionData, LiquidityToAdd, PoolShareDetail, PostionDepositValue, UnitData } from '../types';
/**
 * https://dev.thorchain.org/thorchain-dev/interface-guide/math#lp-units-add
 * @param liquidity - asset amount added
 * @param pool  - pool depths
 * @returns liquidity units - ownership of pool
 */
export declare const getLiquidityUnits: (liquidity: LiquidityToAdd, pool: LiquidityPool) => BigNumber;
/**
 *
 * @param unitData - units for both asset and rune
 * @param pool - pool that the asset is bound to
 * @returns - pool share of both asset and rune in percentage
 */
export declare const getPoolShare: (unitData: UnitData, pool: LiquidityPool) => PoolShareDetail;
/**
 *
 * @param poolShare - the share of asset and rune added to the pool
 * @param pool - Pool that the asset is attached to
 * @returns - returns bignumber representing a slip percentage
 */
export declare const getSlipOnLiquidity: (stake: LiquidityToAdd, pool: LiquidityPool) => BigNumber;
/**
 * https://docs.thorchain.org/thorchain-finance/continuous-liquidity-pools#impermanent-loss-protection
 * @param poolShare - the share of asset and rune added to the pool
 * @param pool - Pool that the asset is attached to
 * @param block - blockl object with current, last added and the constant blocksforlossProtection
 * @returns
 */
export declare const getLiquidityProtectionData: (depositValue: PostionDepositValue, poolShare: PoolShareDetail, block: Block) => ILProtectionData;
/**
 * https://docs.thorchain.org/thorchain-finance/continuous-liquidity-pools#calculating-pool-ownership
 * @param liquidity - asset amount added
 * @param pool  - pool depths
 * @returns liquidity units - % ownership of pool
 */
export declare const getPoolOwnership: (liquidity: LiquidityToAdd, pool: LiquidityPool) => number;
