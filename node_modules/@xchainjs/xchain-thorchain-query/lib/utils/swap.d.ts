import { Asset, Chain } from '@xchainjs/xchain-util';
import { BigNumber } from 'bignumber.js';
import { CryptoAmount } from '../crypto-amount';
import { LiquidityPool } from '../liquidity-pool';
import { ThorchainCache } from '../thorchain-cache';
import { InboundDetail, SwapOutput } from '../types';
export declare const getBaseAmountWithDiffDecimals: (inputAmount: CryptoAmount, outDecimals: number) => BigNumber;
/**
 *
 * @param inputAmount - amount to swap
 * @param pool - Pool Data, RUNE and ASSET Depths
 * @param toRune - Direction of Swap. True if swapping to RUNE.
 * @returns
 */
export declare const getSwapFee: (inputAmount: CryptoAmount, pool: LiquidityPool, toRune: boolean) => CryptoAmount;
/**
 * Works out the swap slip for a given swap.
 *
 * @param inputAmount - amount to swap
 * @param pool - Pool Data, RUNE and ASSET Depths
 * @param toRune - Direction of Swap. True if swapping to RUNE.
 * @returns The amount of slip. Needs to * 100 to get percentage.
 */
export declare const getSwapSlip: (inputAmount: CryptoAmount, pool: LiquidityPool, toRune: boolean) => BigNumber;
/**
 *
 * @param inputAmount - amount to swap
 * @param pool - Pool Data, RUNE and ASSET Depths
 * @param toRune - Direction of Swap. True if swapping to RUNE.
 * @returns The output amount
 */
export declare const getSwapOutput: (inputAmount: CryptoAmount, pool: LiquidityPool, toRune: boolean) => CryptoAmount;
export declare const getDoubleSwapOutput: (inputAmount: CryptoAmount, pool1: LiquidityPool, pool2: LiquidityPool) => CryptoAmount;
/**
 *
 * @param inputAmount - amount to swap
 * @param pool - Pool Data, RUNE and ASSET Depths
 * @returns swap output object - output - fee - slip
 */
export declare const getSingleSwap: (inputAmount: CryptoAmount, pool: LiquidityPool, toRune: boolean) => SwapOutput;
export declare const getDoubleSwapSlip: (inputAmount: CryptoAmount, pool1: LiquidityPool, pool2: LiquidityPool) => BigNumber;
export declare const getDoubleSwapFee: (inputAmount: CryptoAmount, pool1: LiquidityPool, pool2: LiquidityPool, thorchainCache: ThorchainCache) => Promise<CryptoAmount>;
/**
 *
 * @param inputAmount - amount to swap
 * @param pool - Pool Data, RUNE and ASSET Depths
 * @param toRune - Direction of Swap. True if swapping to RUNE.
 * @returns swap output object - output - fee - slip
 */
export declare const getDoubleSwap: (inputAmount: CryptoAmount, pool1: LiquidityPool, pool2: LiquidityPool, thorchainCache: ThorchainCache) => Promise<SwapOutput>;
/**
 * Works out the required inbound or outbound fee based on the chain.
 * Call getInboundDetails to get the current gasRate
 *
 * @param sourceAsset
 * @param gasRate
 * @see https://dev.thorchain.org/thorchain-dev/thorchain-and-fees#fee-calcuation-by-chain
 * @returns
 */
export declare const calcNetworkFee: (asset: Asset, inbound: InboundDetail) => CryptoAmount;
/**
 * Return the chain for a given Asset This method should live somewhere else.
 * @param chain
 * @returns the gas asset type for the given chain
 */
export declare const getChainAsset: (chain: Chain) => Asset;
/**
 *
 * @param chain - input chain string
 * @returns - returns correct chain from string
 */
export declare const getChain: (chain: string) => Chain;
