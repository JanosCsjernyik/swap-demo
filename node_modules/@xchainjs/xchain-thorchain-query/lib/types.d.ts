import { FeeOption } from '@xchainjs/xchain-client';
import { InboundAddress, LiquidityProvider } from '@xchainjs/xchain-thornode';
import { Address, Asset, BaseAmount, Chain } from '@xchainjs/xchain-util';
import { BigNumber } from 'bignumber.js';
import { CryptoAmount } from './crypto-amount';
import { LiquidityPool } from './liquidity-pool';
export declare type TotalFees = {
    inboundFee: CryptoAmount;
    swapFee: CryptoAmount;
    outboundFee: CryptoAmount;
    affiliateFee: CryptoAmount;
};
export declare type SwapEstimate = {
    totalFees: TotalFees;
    slipPercentage: BigNumber;
    netOutput: CryptoAmount;
    waitTimeSeconds: number;
    canSwap: boolean;
    errors: string[];
};
export declare type PoolCache = {
    lastRefreshed: number;
    pools: Record<string, LiquidityPool>;
};
export declare type AsgardCache = {
    lastRefreshed: number;
    inboundAddresses: Record<string, InboundAddress>;
};
export declare type InboundDetailCache = {
    lastRefreshed: number;
    inboundDetails: Record<string, InboundDetail>;
};
export declare type NetworkValuesCache = {
    lastRefreshed: number;
    networkValues: Record<string, number>;
};
export declare type MidgardConfig = {
    apiRetries: number;
    midgardBaseUrls: string[];
};
export declare type EstimateSwapParams = {
    input: CryptoAmount;
    destinationAsset: Asset;
    destinationAddress: Address;
    affiliateAddress?: Address;
    interfaceID?: number;
    affiliateFeePercent?: number;
    slipLimit?: BigNumber;
};
export declare type SwapOutput = {
    output: CryptoAmount;
    swapFee: CryptoAmount;
    slip: BigNumber;
};
export declare type UnitData = {
    liquidityUnits: BigNumber;
    totalUnits: BigNumber;
};
export declare type LiquidityData = {
    rune: CryptoAmount;
    asset: CryptoAmount;
};
export declare type Block = {
    current: number;
    lastAdded?: number;
    fullProtection: number;
};
export declare type ILProtectionData = {
    ILProtection: CryptoAmount;
    totalDays: string;
};
export declare type InboundDetail = {
    chain: Chain;
    address: Address;
    router?: Address;
    gasRate: BigNumber;
    gasRateUnits: string;
    outboundTxSize: BigNumber;
    outboundFee: BigNumber;
    haltedChain: boolean;
    haltedTrading: boolean;
    haltedLP: boolean;
};
export declare type ChainAttributes = {
    blockReward: number;
    avgBlockTimeInSecs: number;
};
export declare type ConstructMemo = {
    input: CryptoAmount;
    destinationAsset: Asset;
    limit: BaseAmount;
    destinationAddress: Address;
    affiliateAddress: Address;
    affiliateFee: BaseAmount;
    feeOption?: FeeOption;
    interfaceID: number;
};
export declare type TxDetails = {
    memo: string;
    toAddress: string;
    expiry: Date;
    txEstimate: SwapEstimate;
};
export declare enum TxStage {
    INBOUND_CHAIN_UNCONFIRMED = 0,
    CONF_COUNTING = 1,
    TC_PROCESSING = 2,
    OUTBOUND_QUEUED = 3,
    OUTBOUND_CHAIN_UNCONFIRMED = 4,
    OUTBOUND_CHAIN_CONFIRMED = 5
}
export declare type TxStatus = {
    stage: TxStage;
    seconds: number;
};
export declare type LiquidityToAdd = {
    asset: CryptoAmount;
    rune: CryptoAmount;
};
export declare type PostionDepositValue = {
    asset: BaseAmount;
    rune: BaseAmount;
};
export declare type PoolShareDetail = {
    assetShare: CryptoAmount;
    runeShare: CryptoAmount;
};
export declare type EstimateAddLP = {
    assetPool: string;
    slipPercent: BigNumber;
    poolShare: PoolShareDetail;
    lpUnits: BaseAmount;
    transactionFee: LPFees;
    runeToAssetRatio: BigNumber;
    estimatedWaitSeconds: number;
    errors: string[];
    canAdd: boolean;
};
export declare type EstimateWithdrawLP = {
    assetAddress?: string;
    runeAddress?: string;
    slipPercent: BigNumber;
    transactionFee: LPFees;
    assetAmount: CryptoAmount;
    runeAmount: CryptoAmount;
    impermanentLossProtection: ILProtectionData;
    estimatedWaitSeconds: number;
    assetPool: string;
};
export declare type LPFees = {
    runeFee: CryptoAmount;
    assetFee: CryptoAmount;
    totalFees: CryptoAmount;
};
export declare type DustValues = {
    asset: CryptoAmount;
    rune: CryptoAmount;
};
export declare type AddliquidityPosition = {
    asset: CryptoAmount;
    rune: CryptoAmount;
};
export declare type WithdrawLiquidityPosition = {
    asset: Asset;
    percentage: number;
    assetAddress?: string;
    runeAddress?: string;
};
export declare type LiquidityPosition = {
    poolShare: PoolShareDetail;
    position: LiquidityProvider;
    impermanentLossProtection: ILProtectionData;
};
export declare type PoolRatios = {
    assetToRune: BigNumber;
    runeToAsset: BigNumber;
};
